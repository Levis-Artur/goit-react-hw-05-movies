{"version":3,"file":"static/js/946.ef491937.chunk.js","mappings":"mNAEaA,EAAYC,EAAAA,GAAAA,IAAH,4JAQTC,EAAcD,EAAAA,GAAAA,IAAH,0IASXE,EAAYF,EAAAA,GAAAA,GAAH,mG,SCfTG,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAGrBC,GAAWC,EAAAA,EAAAA,MACRC,EAAaF,EAAbE,SACT,OACE,SAACR,EAAD,UACGK,EAAOI,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,YAAaC,EAAnB,EAAmBA,MAAnB,OACV,SAACV,EAAD,WACE,UAAC,KAAD,CAAMW,GAAIL,EAASM,SAAS,WAAlB,UAAkCJ,GAAlC,iBAAmDA,GAAMK,MAAO,CAAEC,KAAMV,GAAlF,WACE,gBAAKW,IAAMN,EAAW,UAThB,iDASgB,OAAgBA,GAR7B,8EAQwDO,IAAI,MACrE,SAACf,EAAD,UAAYS,QAHEF,EADR,KAUjB,C,2KCnBYS,E,OAAQlB,GAAAA,GAAH,mE,SC8BlB,EAzBa,WACV,OAA4BmB,EAAAA,EAAAA,UAAS,IAArC,eAAOf,EAAP,KAAegB,EAAf,KAEKC,GAAgBC,EAAAA,EAAAA,cAAW,iBAAC,8GAETC,EAAAA,EAAAA,MAFS,UAExBC,EAFwB,6BAGX,IAAIC,MAAM,4BAHC,OAI9BL,EAAUI,GAJoB,gDADlBE,EAOJ,EAAD,GAPYC,IAAAA,OAAAA,QAAwBD,EAAIE,SACjB,0CADlB,IAAAF,CACkB,uBAQ/B,IAMH,OAJAG,EAAAA,EAAAA,YAAW,WACTR,GACD,GAAE,CAACA,KAGF,6BACE,SAACH,EAAD,UAAO,mBACNd,EAAO0B,OAAO,IAAK,SAAC3B,EAAA,EAAD,CAAYC,OAAQA,MAG7C,C,+IC1BK2B,EAAS,CACbC,QAAS,CAAEC,cAAc,UAAD,OAHZ,yNAEd,SAKeV,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,qJAEoBW,EAAAA,EAAAA,IAFpB,kDAEmCH,GAFnC,cAEQI,EAFR,yBAGSA,EAAIC,KAAKC,SAHlB,2EAOeC,EAAU,GAAVA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAyBC,GAAzB,gFACQC,EADR,2DACkED,EADlE,cAEoBL,EAAAA,EAAAA,IAAUM,EAAKT,GAFnC,cAEQI,EAFR,yBAGSA,EAAIC,KAAKC,SAHlB,2EAOeI,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA4BC,GAA5B,gFAEQF,EAFR,6CAEoDE,GAFpD,SAGoBR,EAAAA,EAAAA,IAAUM,EAAKT,GAHnC,cAGQI,EAHR,yBAISA,EAAIC,MAJb,kE","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home.styled.js","pages/Home.jsx","service/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  justify-content: center;\n  gap: 16px;\n`;\n\nexport const CardWrapper = styled.div`\n  border: 1px solid black;\n  border-radius: 4px;\n  overflow: hidden;\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const MovieName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n`;\n","import { Link, useLocation } from \"react-router-dom\";\nimport { Container, CardWrapper, MovieName } from \"./MoviesList.styled\";\nimport PropTypes from \"prop-types\";\n\nexport const MoviesList = ({ movies }) => {\n  const baseUrl = 'https://themoviedb.org/t/p/w220_and_h330_face'  \n  const defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700'\n  const location = useLocation()\n   const { pathname } = location\n  return (\n    <Container>\n      {movies.map(({id, poster_path, title}) => (\n        <CardWrapper key={id}>\n          <Link to={pathname.endsWith(\"/movies\") ? `${id}` : `movies/${id}`} state={{ from: location }}>\n            <img src={ poster_path ? `${baseUrl}${poster_path}`: defaultImg} alt=\"\" />\n            <MovieName>{title}</MovieName>\n          </Link>\n        </CardWrapper>\n      ))}\n    </Container>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired\n}","import styled from \"styled-components\";\n\nexport const Title = styled.h1`\n  text-align: center;\n  color: darkblue;\n`;","import Notiflix from 'notiflix';\nimport 'notiflix/src/notiflix.css';\nimport { MoviesList } from \"../components/MoviesList/MoviesList\";\nimport { getTrending } from \"../service/api\";\nimport { useState, useEffect, useCallback } from 'react'\nimport {Title} from \"./Home.styled\"\n\nconst Home = () => {\n   const [movies, setMovies] = useState([]);\n  const onError = err => Notiflix.Notify.failure(err.message)\n  const fetchTranding = useCallback(async () => {\n    try {\n      const result = await getTrending()\n      if (!result) throw new Error(\"Sorry, no data tranding.\");\n      setMovies(result)\n    } catch (error) {\n      onError(error)\n    };\n  }, [])\n  \n  useEffect( () => {\n    fetchTranding()\n  }, [fetchTranding]);\n  \n  return (\n    <main>\n      <Title>Tranding today</Title>\n      {movies.length>0 && <MoviesList movies={movies} />}\n    </main>\n  );\n};\n\nexport default Home;","import axios from 'axios';\n// const API_KEY = \"0baa7cdb523c5e7ac9d70a232fc0ebec\"\nconst token = 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwYmFhN2NkYjUyM2M1ZTdhYzlkNzBhMjMyZmMwZWJlYyIsInN1YiI6IjY0Y2E1MzFmZDM3MTk3MDEzOTc4YjNlZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RBHU2kDT3Swele15gvAopB0TouomeG_bY1uLDLfirLg';\n\nconst config = {\n  headers: { Authorization: `Bearer ${token}` }\n};\n\n\nasync function getTrending() {\n  const url = `https://api.themoviedb.org/3/trending/movie/day`;\n  const res = await axios.get(url, config);\n  return res.data.results;\n  // id, title, backdrop_path (jpg), poster_path\n}\n\nasync function getMovies(query) {\n  const url = `https://api.themoviedb.org/3/search/movie?query=\"${query}\"`;\n  const res = await axios.get(url, config);\n  return res.data.results;\n  // id, title, backdrop_path (jpg), poster_path\n}\n\nasync function getMovieById(movieId) {\n  // 615656\n  const url = `https://api.themoviedb.org/3/movie/${movieId}`;\n  const res = await axios.get(url, config);\n  return res.data;\n  // genres, overview, title, vote_average, release_date, poster_path, backdrop_path\n  \n  // cast //\n  // name, profile_path\n\n  // reviews //\n// author, content\n}\n\n\n// https://api.themoviedb.org/3/trending/movie/i2GVEvltEu3BXn5crBSxgKuTaca.jpg\n// src=\"https://themoviedb.org/t/p/w220_and_h330_face/i2GVEvltEu3BXn5crBSxgKuTaca.jpg\">\n// https://themoviedb.org/t/p/w220_and_h330_face/uS1AIL7I1Ycgs8PTfqUeN6jYNsQ.jpg\n\n// https://www.themoviedb.org/t/p/w300_and_h450_bestv2/vbvcvIxXywM6rP1ayoz3AxE83oe.jpg\n\n// by id\n//poster https://www.themoviedb.org/t/p/w300_and_h450_bestv2/4m1Au3YkjqsxF8iwQy0fPYSxE0h.jpg\n\n//backdrop https://www.themoviedb.org/t/p/w1920_and_h800_multi_faces/zN41DPmPhwmgJjHwezALdrdvD0h.jpg\n\nexport { getTrending, getMovies, getMovieById };"],"names":["Container","styled","CardWrapper","MovieName","MoviesList","movies","location","useLocation","pathname","map","id","poster_path","title","to","endsWith","state","from","src","alt","Title","useState","setMovies","fetchTranding","useCallback","getTrending","result","Error","err","Notiflix","message","useEffect","length","config","headers","Authorization","axios","res","data","results","getMovies","query","url","getMovieById","movieId"],"sourceRoot":""}