{"version":3,"file":"static/js/713.c2b8b595.chunk.js","mappings":"sRAEaA,EAAYC,EAAAA,GAAAA,IAAH,gIAOTC,EAAcD,EAAAA,GAAAA,IAAH,6IAOXE,EAAOF,EAAAA,GAAAA,GAAH,mG,2BCgCjB,EAxCa,WACX,IAEUG,GAAYC,EAAAA,EAAAA,MAAZD,QACV,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAsCF,EAAAA,EAAAA,WAAS,GAA/C,eAAOG,EAAP,KAAoBC,EAApB,KAGQC,GAAiBC,EAAAA,EAAAA,cAAW,iBAAC,8GAEZC,EAAAA,EAAAA,IAAa,GAAD,OAAIT,EAAJ,aAFA,UAE3BU,EAF2B,6BAGZ,IAAIC,MAAM,wBAHE,OAI/BP,EAAYM,EAAOE,MAJY,gDAFrBC,EAQJ,EAAD,GARYC,IAAAA,OAAAA,QAAwBD,EAAIE,SAEd,yBAQ7BV,GAAaC,GAAe,GARC,uDAFrB,IAAAO,CAEqB,6BAUhC,CAACb,EAASK,IAMf,OAJEW,EAAAA,EAAAA,YAAU,WACRT,GACD,GAAE,CAACA,KAGF,+BACMF,IAAgBF,EAASc,OAAS,GAC/B,SAACrB,EAAD,UACJO,EAASe,QAAO,SAACC,EAAMC,EAAOC,GAAd,OAAwBA,EAAMC,WAAU,SAAAC,GAAK,OAAIA,EAAMC,KAAOL,EAAKK,EAAtB,MAA8BJ,CAA3E,IACdK,KAAI,gBAAGD,EAAH,EAAGA,GAAIE,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAArB,OACK,UAAC7B,EAAD,YACI,gBAAK8B,IAAKF,EAAY,UA9B9B,qDA8B8B,OAAgBA,GA7B3C,8EA6BwEG,IAAI,MACvE,SAAC9B,EAAD,UAAO4B,MAFOH,EADvB,OAMe,uBAAG,oCAGlC,C,+IC1CKM,EAAS,CACbC,QAAS,CAAEC,cAAc,UAAD,OAHZ,yNAEd,SAKeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,qJAEoBC,EAAAA,EAAAA,IAFpB,kDAEmCJ,GAFnC,cAEQK,EAFR,yBAGSA,EAAIC,KAAKC,SAHlB,2EAOeC,EAAU,GAAVA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAyBC,GAAzB,gFACQC,EADR,2DACkED,EADlE,cAEoBL,EAAAA,EAAAA,IAAUM,EAAKV,GAFnC,cAEQK,EAFR,yBAGSA,EAAIC,KAAKC,SAHlB,2EAOe5B,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA4BT,GAA5B,gFAEQwC,EAFR,6CAEoDxC,GAFpD,SAGoBkC,EAAAA,EAAAA,IAAUM,EAAKV,GAHnC,cAGQK,EAHR,yBAISA,EAAIC,MAJb,kE","sources":["components/Cast/Cast.style.js","components/Cast/Cast.jsx","service/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  margin-top: 12px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 138px);\n  gap: 16px;\n`;\n\nexport const CardWrapper = styled.div`\n  border: 1px solid lightgrey;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 8px rgba(0,0,0,.1);\n`;\n\nexport const Name = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n`;\n","import Notiflix from 'notiflix';\nimport 'notiflix/src/notiflix.css';\nimport { useParams } from \"react-router-dom\";\nimport { Container, CardWrapper, Name } from \"./Cast.style\";\nimport { getMovieById } from \"../../service/api\";\nimport { useState, useEffect, useCallback } from \"react\";\n\n\nconst Cast = () => {\n  const baseUrl = 'https://www.themoviedb.org/t/p/w138_and_h175_face'  \n  const defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700'\n    const { movieId } = useParams();\n  const [castList, setCastList] = useState([]);\n  const [firstRender, setFirstRender] = useState(true);\n  const onError = err => Notiflix.Notify.failure(err.message);\n    \n    const fetchMovieCast = useCallback(async () => {\n    try {\n      const result = await getMovieById(`${movieId}/credits`)\n        if (!result) throw new Error(\"Sorry, no data cast.\");\n        setCastList(result.cast)\n    } catch (error) {\n      onError(error)\n    } finally {\n      if (firstRender) setFirstRender(false)\n    };\n    }, [movieId, firstRender])\n    \n    useEffect(() => {\n      fetchMovieCast()\n    }, [fetchMovieCast]);  \n// 447277/cast -  duble id cast\n  return (\n      <>\n          {!firstRender && (castList.length > 0 ?\n              (<Container >\n          {castList.filter((item, index, array) => array.findIndex(actor => actor.id === item.id) === index)\n            .map(({ id, profile_path, name }) => (\n                      <CardWrapper key={id}>\n                          <img src={profile_path ? `${baseUrl}${profile_path}` : defaultImg} alt=\"\" />\n                          <Name>{name}</Name>\n                      </CardWrapper>\n                  ))}\n              </Container >) : (<p>No cast information available</p>))}\n    </>\n  );\n};\n\nexport default Cast;","import axios from 'axios';\n// const API_KEY = \"0baa7cdb523c5e7ac9d70a232fc0ebec\"\nconst token = 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwYmFhN2NkYjUyM2M1ZTdhYzlkNzBhMjMyZmMwZWJlYyIsInN1YiI6IjY0Y2E1MzFmZDM3MTk3MDEzOTc4YjNlZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RBHU2kDT3Swele15gvAopB0TouomeG_bY1uLDLfirLg';\n\nconst config = {\n  headers: { Authorization: `Bearer ${token}` }\n};\n\n\nasync function getTrending() {\n  const url = `https://api.themoviedb.org/3/trending/movie/day`;\n  const res = await axios.get(url, config);\n  return res.data.results;\n  // id, title, backdrop_path (jpg), poster_path\n}\n\nasync function getMovies(query) {\n  const url = `https://api.themoviedb.org/3/search/movie?query=\"${query}\"`;\n  const res = await axios.get(url, config);\n  return res.data.results;\n  // id, title, backdrop_path (jpg), poster_path\n}\n\nasync function getMovieById(movieId) {\n  // 615656\n  const url = `https://api.themoviedb.org/3/movie/${movieId}`;\n  const res = await axios.get(url, config);\n  return res.data;\n  // genres, overview, title, vote_average, release_date, poster_path, backdrop_path\n  \n  // cast //\n  // name, profile_path\n\n  // reviews //\n// author, content\n}\n\n\n// https://api.themoviedb.org/3/trending/movie/i2GVEvltEu3BXn5crBSxgKuTaca.jpg\n// src=\"https://themoviedb.org/t/p/w220_and_h330_face/i2GVEvltEu3BXn5crBSxgKuTaca.jpg\">\n// https://themoviedb.org/t/p/w220_and_h330_face/uS1AIL7I1Ycgs8PTfqUeN6jYNsQ.jpg\n\n// https://www.themoviedb.org/t/p/w300_and_h450_bestv2/vbvcvIxXywM6rP1ayoz3AxE83oe.jpg\n\n// by id\n//poster https://www.themoviedb.org/t/p/w300_and_h450_bestv2/4m1Au3YkjqsxF8iwQy0fPYSxE0h.jpg\n\n//backdrop https://www.themoviedb.org/t/p/w1920_and_h800_multi_faces/zN41DPmPhwmgJjHwezALdrdvD0h.jpg\n\nexport { getTrending, getMovies, getMovieById };"],"names":["Container","styled","CardWrapper","Name","movieId","useParams","useState","castList","setCastList","firstRender","setFirstRender","fetchMovieCast","useCallback","getMovieById","result","Error","cast","err","Notiflix","message","useEffect","length","filter","item","index","array","findIndex","actor","id","map","profile_path","name","src","alt","config","headers","Authorization","getTrending","axios","res","data","results","getMovies","query","url"],"sourceRoot":""}